해킹 대회 문제.pcap

제 1회 해킹 문제 연습.
해킹 대회의 느낌을 익히고 방법과 이론을 공부하고 정리하는 것을 중점으로 함.

# 문제 1 - Telnet... (Hint : Key is telnet Password)
	## Telnet?) 
	Telnet의 문제를 풀기 위해선 Telnet에 대해서 알아야했다.
	 TCP/IP 기반의 프로토콜이고, 23번 포트를 이용한다. (규약)
	 보안상 사용자가 포트 변경이 가능하다.
	 원격 터미널 접속 서비스다.

	## Telnet의 취약점)
	 직접 네트워크를 통해 넘기기 때문에 누구나 해당 정보를 열어볼 수 있음.
	 모든 데이터를 평문으로 전송하여 ID/PWD 및 실행한 명령어를 볼 수 있다.

	##보안 문제를 위한 해결 방안 -> SSH (Secure Shell Protocol)
	 간단하게 알아보면,
	 네트워크 프로토콜중 하나이며, public한 Network를 통해 서로 통신할 때 보안을 중시하여 안전하게 통신하기 위해 사용하는 프로토콜임.
	 데이터 전송과 원격 제어에 사용한다.
	 
	##SSH작동 원리
	 Private Key와 Public Key를 이용하여 인증 과정을 거친다.
	 Public Key는 공개가능, 암호화는 가능하지만 복호화 불가.
	 Private Key는 절대 공개X 컴퓨터 내부에 저장되어있으며, 암호화된 메세지를 복호화 할 수있음.

문제풀이)

문제를 집어보면 Telnet이라고 되어있고 다른 문제로는 텔넷은 다보여라고 작성되어있었다.
힌트는 이곳의 패스워드를 입력하라고 되어있는 것을 보니 패스워드를 찾아 입력하면 되는 것 같았다.
Telnet만 검색하면 되기에 Filter를 이용하여 Telnet만 보도록 했다. (사용 프로그램 : WireShark)
Follow -> TCP Stream을 클릭하면 ubuntu login과 Pwd를 볼 수 있었다.
거기에 적혀있는 PWD를 입력하면 해당 문제는 해결.

문제를 풀며 느낀 점)
해당 문제는 내가 제일 처음 접한 문제다. Hint와 1번째 문제는 딱 Telnet...이라고만 되어있어 도대체 텔넷이 어쩌라고? 라는 느낌이 강했다.
그래서 검색을 통해 텔넷이 무엇인가 하니, 아 저런 취약점이 있구나를 찾을 수 있었다.
실제로도 wireShark를 사용할 때 Follow -> TCP Stream을 보는 방법을 알고 있었고, 그것으로 답을 봤음에도 불구하고 (PWD도 봤었다.) 어쩌라고? 생각했다.
그래서 하나하나 텔넷을 분석해보자 하고 직접하나하나 클릭하여 까봤더니 결국에는 TCP Stream으로 본것을 나눠 데이터를 전송한 것일 뿐이었다. 
말그대로 Stream은 모든 흐름을 모아뒀던 것이었다!
답을 찾았으나 맞추지 못했다.

# 문제 2 - 웹 서핑 중에 실행된 웹쉘을 찾아라 (Hint :IIS 세미콜론 취약점을 이용한 웹쉘)
	##WebShell
	 해당 문제를 풀기 위해선 WebShell을 알아야 했다.
	 WebShell은 파일 업로드 기능을 이용하여 시스템에 명령하는 코드를 심어 공격하는 것이라고 설명한다.
	 간단한 서버 스크립트로 작성되며(jsp,php,asp)로 만드는 방법이 널리 사용된다. 이외에도 더 있긴 했다. 자세한 사항은 http://www.igloosec.co.kr/BLOG_Webshell%20%EB%B6%84%EB%A5%98%20%EB%B0%8F%20%EB%8C%80%EC%9D%91%EB%B0%A9%EC%95%88?searchItem=&searchWord=&bbsCateId=1&gotoPage=1 에서 확인이 가능했다.
	 시스템이 장악하기에 매우 위험한 공격이다.

	 ##IIS 세미콜론 취약점을 이용한 웹쉘
	 위험도는 매우 상이다.
	 작동원리는 간단했다.
	 프로그램상에서 ;콜론을 기준으로 뒤의 문자는 해석하지 않는다.
	 고로 파일을 .서버_스크립트확장자;.jpg를 업로하게 된다면 .서버_스크립트를 작동하고 .jpg로 인식하지 않는다는 것이다.
	 이와 비슷한 예제를 예전에 봤던 것 같다.
	 게시물을 만들 때, 코드를 입력하면 DB에 들어가서 명령어가 작동되는 예였다. 비슷한 종류의 공격같다.
	 IIS 세미콜론 취약점은 asp파일로 작동하는 것을 알았다.


	 
문제풀이)
WebShell에는 다양한 서버 스크립트로 공격할 수 있단 것을 알 수 있었다.
그중에서 IIS 취약점은 ASP를 이용한다는 정보를 얻을 수 있었다.
확장자를 무시하기 위해 ';'로 끝나기 떄문에 ".asp;"를 검색하면 웹쉘을 찾을 수 있지 않을까? 확장자는 .jpg,gif 등 다양하기에 확장자를 이용하여 찾는 것은 힘들다고 판단한 것.
Control+f로 find창을 열어 .asp;를 검색하니 하나의 패킷을 가리켰고, HTP(HyperText Transfer Protocol)을 여니 Post 메소드로 .asp;.jpg파일이 전송된 것을 확인 할 수 있었다.
답은 그 파일의 이름이었다.

문제를 풀며 느낀 점)
WebShell이라는 공격기법은 처음 들어보지만 이러한 사례는 자바 코딩공부를하며 위험하다고 배웠었다. 
그래서 확장자를 확인하고, 스크립트 언어를 그냥 문자로 만드는 API를 사용하여 프로그래밍을 해야한다고 배웠었다.
그러나 처음 접한 해킹 문제에서 WebShell로 공격한 패킷을 찾는 것은 막막한 것이었다.
IIS 세미콜론 취약점을 이용한 웹쉘이라고 힌트를 줘도, 그것으로 검색해볼 생각하지 않고, WebShell만 검색하여 무엇인지 알아냈다.
jsp,asp,php,asp.net등을 확인할 수 있었고, 이걸 어떻게 찾으라고? 싶었다.
IIS 세미콜론 취약점이라고 검색했다면 쉽게 풀 수 있을 문제였다.





# 문제 3 - 누군가 80포트를 통해 나의 중요한 파일을 삭제했다. 그 파일의 이름은 무엇인가? (Hint : METHOD vulnerability. check the contents of uploaded file)
	##80포트를 통해 나의 파일을 삭제하는 방법에 대해 알아야 한다.
	80포트는 http의 기본 포트다. 즉 http를 통해 파일을 삭제 했다고 유추할 수 있었다. (https는 443 Port)
	파일 삭제할 때 주로 put과 delete Method를 사용한다는 정보를 얻었으니 까보고 Method가 무엇인지 찾아보면 될일이라 판단.
	그럼 80포트로 왔다간 패킷을 wireshark로 찾아보기로 했다.
	filter를 http로 했으나 엄청 많은 http통신을 찾아볼 수 있었다. 이것을 하나씩 까다간 하루종일해도 찾을 수 없을 거라는 판단.
	file - Export - Http Objects list를 통하여 찾았다. (filter 적용하지 않아야 리스트를 클릭했을 때 해당 패킷으로 가는 사실을 알았다.)
	무수히 많은 hostName중에 아이피로 되어있는 것들을 중점으로 찾았다. 
	그러자 아이피로 통신했으면서 Content-Type이 비어있는 아주 수상한 txt파일을 찾을 수 있었다.
	클릭하여 해당패킷으로 이동하고 Follow - Tcp Stream으로 확인한 결과 Put Method를 사용한 파일이었다.
	Response 부분에 request의 일부분이 침범해있었고, 그것이 곧 답이었다.
	문제 해설지에는 WebDAv의 취약점이라 하여 찾아보니 WebDAV는 Http Protocol의 확장으로,
	월드 와이드 웹 서버에 저장된 무서와 파일을 편집하고 관리하는 사용자들 사이에 협업을 용이하게 해주는 서비스라고 한다.


문제를 풀며 느낀 점)
file 카빙 기법을 한 번 실습하며 Http Objects list를 보는 법을 알았다. 그것으로 파일을 추출하는 간편한 프로그램 사용법도 알아냈고.
그 덕에 HTTP에서 파일을 추출하는 법을 알았는데, 이번에는 통신이 이루어진 패킷을 찾을 수 있다는 것을 새로 알았다.
알긴 하지만 역시 문제의 답을 봐놓고도 풀 수 없는 상황이 발생했다.
문제 풀이를 보며 나의 실수를 느꼈을 땐, 더 많은 문제를 찾을 수 있었다. content-type이 없음이 이상한 것을 못느낀 실수와,
Put과 Delete 메소드를 썼을 거란 추측을 하지 못한 것이다. 웹사이트를 만들 때 분명 사용했음에도 불구하고 말이다.
해킹과 웹사이트 제작을 별개로 생각하는 문제를 알 수 있었다. 결국 프로그래밍의 취약점을 찾아 공격하는 것이 해커임을 살짝 와닿을 수 있었다.


# 문제 4 - 메일을 보고 이곳으로 와줘! (Hint : Use your fingers)
	##메일을 보고 이곳으로 와달라해서 메일을 찾는 HTTP를 쫙 뒤져봤으나 오래 걸리기도하고, 해당 문제를 이해할 수 없었다.
	메일을 보고 와달라면서 힌트는 손가락을 사용하라니?
	그래서 결국 해당 문제는 접근 자체를 못했었다.
	해당 문제 풀이를 보니, 새로운 프로그램을 사용하여 Images를 봐야 했던 것이다!( 사용 프로그램 : NetWorkMiner)
	네트웤마이너로 pcap 파일을 여니 images란에 come_here이라는 파일을 찾을 수 있었다. 이게 답이라니...
	스마트폰을 이용하란 소리였다!
	근데 스마트폰을 이용해보니 마이첼시라는 상호명만 나올뿐 알 수 없어, 컴퓨터로 qr코드를 스캔했다.
	그랬더니 마이첼시와 동일한 장소가 나왔다.
	문제 풀이를 보니 마이첼시를 영어로치면...답이었다.

문제를 풀며 느낀 점)
사용하는 프로그램과 검색에 제한이 없다는 온라인 해킹대회에서 어... 이런 도구의 활용들을 모르면 그리고 문제의 유형을 모르면 진짜 아예 풀 수 없구나를 느꼈다.
qr코드는 해킹 대회에서 자주 나오는 문제라고한다.
그러니까 많이 풀고 많은 상황을 마주하고 이론과 실습을 겸하며, 통찰력과 문제를 많이 알아야한다는 것이다!
이제 막 입문한 내가 어려워 하는 것이 이상하지 않았다.

# 문제 5 - 뭐가 궁금해? 네이버에서 검색해 봐
	##네이버에 검색해봐? 그럼 네이버 검색기록을 뒤지면 되겠구나.
	HTTP objects list에서 filter를 search로 적용하니 네이버에서 검색한 것들이 나왔다.(네이버가 아닌 것도 나왔는데 그 것은 파일명이 search가 포함되어있었다.)
	제일 위에 좌라락 나온 리스트의 'q=' 다음에 나오는 것들이 인코딩된 검색어 인것을 알 수 있었다.(자바 웹 프로그래밍할 때 배웠었다.)
	반복해서 검색하는 것을 보니 그 검색의 맨 밑을 디코딩 해보니 HTP가 나왔다. (디코딩 사이트 : https://www.convertstring.com/ko/EncodeDecode/UrlDecode)

문제를 풀며 느낀 점)
제일 쉬웠다. 일단 GET방식으로 정보를 보내거나 뽑아올 때 인,디코딩을 한다는 지식을 알고 있었으니, 그렇게 느낄 수 있다.
그것보단 문제가 제일 직관적이었다는게 컸다.
궁금한 것을 네이버에 검색해보라니? 완전 거저였다. 그럼 검색어를 찾으란 거니까!
다른 문제도 이랬으면... 헤맬일이 적지 않았을까?

# 문제 6 - 이번엔 어디로 놀러갈까?
# 문제 7 - 동건이는 악성 앱을 설치하였다. 이 때 정보가 빠져나갔다. 빠져나간 시간을 찾아라.
# 문제 8 - 메신저로 전달된 우탱이 먹고 싶은 라면의 이름은?
