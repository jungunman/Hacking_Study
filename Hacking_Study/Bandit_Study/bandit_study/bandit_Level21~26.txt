#Bandit Level 20 → Level 21
Level Goal)
-There is a setuid binary in the homedirectory that does the following: it makes a connection to localhost on the port you specify as a commandline argument. It then reads a line of text from the connection and compares it to the password in the previous level (bandit20). If the password is correct, it will transmit the password for the next level (bandit21).

-NOTE: Try connecting to your own network daemon to see if it works as you think

Commands you may need to solve this level)
-ssh, nc, cat, bash, screen, tmux, Unix ‘job control’ (bg, fg, jobs, &, CTRL-Z, …)


#Bandit Level 20 → Level 21 풀이과정)
ls -al을 하면 suconnect라는 setuid의 파일이 있는데 권한을 보면 -rwsr-x---였다.
실행하니
Usage: ./suconnect <portnumber>
This program will connect to the given port on localhost using TCP. If it receives the correct password from the other side, the next password is transmitted back.
라는 사용법과 함께 친절히 설명도 있었다.
TCP를 사용해서 localhost에 지정된 포트에 연결해주는 프로그램. 상대방으로부터 올바른 비밀번호를 받으면 다음 비밀번호를 돌려준단다.
여기서 막혔다. 그래서 현시점에서 필요한 명령어들을 싹다 검색했다.
bash - 리눅스 Shell, 사용자의 명령을 해석하고 커널에 명령을 요청해주는 역할
screen, tmux - 화면 분할.
    Session: 여러 윈도우로 구성,
    Window : 터미널 화면, 세션 내에서 탭처럼 사용 가능, 
    Pane : 하나의 윈도우내에서 화면 분할
등 여기서 나는 tmux를 사용했다.

일단 명령어들을 하나씩 살펴보면, 서버를 2개 이용해야하는 것처럼 화면을 나눈다.
그래서 나는 tmux의 pane를 이용하여 화면분할로 게임을 이어갔다.
nc가 있다. 일단 서버에 전송하거나 받는 것은 확실하니, nc를 사용한다.
nmap을 사용하여 localhost의 열려있는 서버를 확인했다.
nmap localhost -> 3개의 서버가 열려있었다.
포트가 겹치면 안되기에 나는 nc -l 228을 사용하여 listen모드로 서버를 받게 했다.
그리고 ./suconnect 228 로 접속을 했으나, connect 불가.
왜인가 싶으니, nmap localhost -p 228 를 검색해보니 닫혀있었다.
그래서 다시 nc -lp 228 로 열려고했다. 그러나, 실패.
권한이 없단다.
권한이 문제일 이유가 있나? 싶어서 검색 및 질문을 했더니, 포트가 낮은 경우 서비스를 하고 있는 경우가 있어 잘못쓰게 막아둔다고 한다.
그래서 8080으로 포트를 변경.
nc -lp 8080으로 하고  nmap으로 확인하니 잘열려있다.
./suconnect 파일도 잘 열리고, 여기서 입력하라고 대기하고 있는데. ./suconnect 실행한 곳에서 비밀번호를 건내주니 반응이 없었다.
nc에서 bandit20 비밀번호를 보내니 ./suconnect 부분에서
Read: GbKksEFF4yrVs6il55v6gwY5aVje5f0j                                           
Password matches, sending next password
라고 오며, nc 서버에서 다음 패스워드가 돌아왔다.



답 == gE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr








#Bandit Level 21 → Level 22
Level Goal)
-A program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what command is being executed.

Commands you may need to solve this level)
-cron, crontab, crontab(5) (use “man 5 crontab” to access this)

#Bandit Level 21 → Level 22 풀이 과정)

cron이라는 새로운 명령어가 나왔다.
cron을 검색해서 알아보았다.
쉽게 말하면 실행 프로그램을 특정 시간에(특정 시간마다) 백그라운드에서 자동으로 수행하게 해주는 명령어다.
Cron Process는 /etc/crontab 파일에 설정된 것을 읽어서 수행한단다.
crontab = cron 작업을 설정하는 파일.
/etc/crontab의 형식은 7가지의 필드로 이루어져 잇다.
분 시 일 월 요일 사용자 실행명령
****** user <command to be executed>
crontab은 수행내역이 담긴 파일위치를 참고한다.
/var/spool/cron
/etc/cron.d
/etc/crontab

ls -al을 했으나 특별한 건 없다.
지문에는 cron.d를 확인해보라고 했으니 넘어갔다.
그랬더니 cronjob_*이라고 적혀진 파일들이 많았다.
권한을 보면 -rw-r--r--이었다. user와 group은 root였지만 other도 읽을 순 있기에 cat으로 읽었다.
cat ./cronjob_bandit22
@reboot bandit22 /usr/bin/cronjob_bandit22.sh &> /dev/null
* * * * * bandit22 /usr/bin/cronjob_bandit22.sh &> /dev/null

* * * * * bandit22 매분 bandit22라는 유저가 /usr/bin/cronjob_bandit22.sh에 있는 명령어를 실행하고 있다.
@reboot음.. 리부팅 할때마다 실행해주고 있다.
라고 해석했다.
그렇다면 일단 저곳으로 가보자
cd ./usr/bin -> cronjob_bandit22.sh

가서 ls -al을 했더니 너무 많은 파일들이 나와서 ls -l cronjob_bandit22.sh으로 파일이 있는지 확인해주었고
있었다.

권한은 -rwxr-x--- 유저는 bandit22 그룹은 bandit21!
그룹은 읽을수도 실행시킬수도있었다.
일단 읽어봤다.
cat ./cronjob_bandit22.sh
출력된 내용물은 아래와 같다.
#!/bin/bash
chmod 644 /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv
cat /etc/bandit_pass/bandit22 > /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv

/tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv에
chmod는 권한이고 644, user는 읽고 쓰기 가능 실행불가, 그룹과 그외는 읽기만 가능한 커미션을 주었단다.
그리고 밑에 cat 명령어를 보면
cat file1 > file2 일 경우
파일 복사를 이루어지는데, 그니까 해석해보면 
cat으로 bandit22의 비밀번호를 /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv 에 복사해놨고, 읽을 수 있도록 했다.
cat으로 절대 경로를 입력하니 답이 나왔다.


답 == Yk7owGAcWjwMVRwrTesJEwB7WVOiILLI