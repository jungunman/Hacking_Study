#Bandit Level 20 → Level 21
Level Goal)
-There is a setuid binary in the homedirectory that does the following: it makes a connection to localhost on the port you specify as a commandline argument. It then reads a line of text from the connection and compares it to the password in the previous level (bandit20). If the password is correct, it will transmit the password for the next level (bandit21).

-NOTE: Try connecting to your own network daemon to see if it works as you think

Commands you may need to solve this level)
-ssh, nc, cat, bash, screen, tmux, Unix ‘job control’ (bg, fg, jobs, &, CTRL-Z, …)


#Bandit Level 20 → Level 21 풀이과정)
ls -al을 하면 suconnect라는 setuid의 파일이 있는데 권한을 보면 -rwsr-x---였다.
실행하니
Usage: ./suconnect <portnumber>
This program will connect to the given port on localhost using TCP. If it receives the correct password from the other side, the next password is transmitted back.
라는 사용법과 함께 친절히 설명도 있었다.
TCP를 사용해서 localhost에 지정된 포트에 연결해주는 프로그램. 상대방으로부터 올바른 비밀번호를 받으면 다음 비밀번호를 돌려준단다.
여기서 막혔다. 그래서 현시점에서 필요한 명령어들을 싹다 검색했다.
bash - 리눅스 Shell, 사용자의 명령을 해석하고 커널에 명령을 요청해주는 역할
screen, tmux - 화면 분할.
    Session: 여러 윈도우로 구성,
    Window : 터미널 화면, 세션 내에서 탭처럼 사용 가능, 
    Pane : 하나의 윈도우내에서 화면 분할
등 여기서 나는 tmux를 사용했다.

일단 명령어들을 하나씩 살펴보면, 서버를 2개 이용해야하는 것처럼 화면을 나눈다.
그래서 나는 tmux의 pane를 이용하여 화면분할로 게임을 이어갔다.
nc가 있다. 일단 서버에 전송하거나 받는 것은 확실하니, nc를 사용한다.
nmap을 사용하여 localhost의 열려있는 서버를 확인했다.
nmap localhost -> 3개의 서버가 열려있었다.
포트가 겹치면 안되기에 나는 nc -l 228을 사용하여 listen모드로 서버를 받게 했다.
그리고 ./suconnect 228 로 접속을 했으나, connect 불가.
왜인가 싶으니, nmap localhost -p 228 를 검색해보니 닫혀있었다.
그래서 다시 nc -lp 228 로 열려고했다. 그러나, 실패.
권한이 없단다.
권한이 문제일 이유가 있나? 싶어서 검색 및 질문을 했더니, 포트가 낮은 경우 서비스를 하고 있는 경우가 있어 잘못쓰게 막아둔다고 한다.
그래서 8080으로 포트를 변경.
nc -lp 8080으로 하고  nmap으로 확인하니 잘열려있다.
./suconnect 파일도 잘 열리고, 여기서 입력하라고 대기하고 있는데. ./suconnect 실행한 곳에서 비밀번호를 건내주니 반응이 없었다.
nc에서 bandit20 비밀번호를 보내니 ./suconnect 부분에서
Read: GbKksEFF4yrVs6il55v6gwY5aVje5f0j                                           
Password matches, sending next password
라고 오며, nc 서버에서 다음 패스워드가 돌아왔다.



답 == gE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr








#Bandit Level 21 → Level 22
Level Goal)
-A program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what command is being executed.

Commands you may need to solve this level)
-cron, crontab, crontab(5) (use “man 5 crontab” to access this)

#Bandit Level 21 → Level 22 풀이 과정)

cron이라는 새로운 명령어가 나왔다.
cron을 검색해서 알아보았다.
쉽게 말하면 실행 프로그램을 특정 시간에(특정 시간마다) 백그라운드에서 자동으로 수행하게 해주는 명령어다.
Cron Process는 /etc/crontab 파일에 설정된 것을 읽어서 수행한단다.
crontab = cron 작업을 설정하는 파일.
/etc/crontab의 형식은 7가지의 필드로 이루어져 잇다.
분 시 일 월 요일 사용자 실행명령
****** user <command to be executed>
crontab은 수행내역이 담긴 파일위치를 참고한다.
/var/spool/cron
/etc/cron.d
/etc/crontab

ls -al을 했으나 특별한 건 없다.
지문에는 cron.d를 확인해보라고 했으니 넘어갔다.
그랬더니 cronjob_*이라고 적혀진 파일들이 많았다.
권한을 보면 -rw-r--r--이었다. user와 group은 root였지만 other도 읽을 순 있기에 cat으로 읽었다.
cat ./cronjob_bandit22
@reboot bandit22 /usr/bin/cronjob_bandit22.sh &> /dev/null
* * * * * bandit22 /usr/bin/cronjob_bandit22.sh &> /dev/null

* * * * * bandit22 매분 bandit22라는 유저가 /usr/bin/cronjob_bandit22.sh에 있는 명령어를 실행하고 있다.
@reboot음.. 리부팅 할때마다 실행해주고 있다.
라고 해석했다.
그렇다면 일단 저곳으로 가보자
cd ./usr/bin -> cronjob_bandit22.sh

가서 ls -al을 했더니 너무 많은 파일들이 나와서 ls -l cronjob_bandit22.sh으로 파일이 있는지 확인해주었고
있었다.

권한은 -rwxr-x--- 유저는 bandit22 그룹은 bandit21!
그룹은 읽을수도 실행시킬수도있었다.
일단 읽어봤다.
cat ./cronjob_bandit22.sh
출력된 내용물은 아래와 같다.
#!/bin/bash
chmod 644 /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv
cat /etc/bandit_pass/bandit22 > /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv

/tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv에
chmod는 권한이고 644, user는 읽고 쓰기 가능 실행불가, 그룹과 그외는 읽기만 가능한 커미션을 주었단다.
그리고 밑에 cat 명령어를 보면
cat file1 > file2 일 경우
파일 복사를 이루어지는데, 그니까 해석해보면 
cat으로 bandit22의 비밀번호를 /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv 에 복사해놨고, 읽을 수 있도록 했다.
cat으로 절대 경로를 입력하니 답이 나왔다.


답 == Yk7owGAcWjwMVRwrTesJEwB7WVOiILLI










#Bandit Level 22 → Level 23
Level Goal)
-A program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what command is being executed.

-NOTE: Looking at shell scripts written by other people is a very useful skill. The script for this level is intentionally made easy to read. If you are having problems understanding what it does, try executing it to see the debug information it prints.

Commands you may need to solve this level)
-cron, crontab, crontab(5) (use “man 5 crontab” to access this)


#Bandit Level 22 → Level 23 풀이 과정)
전과 같이 /etc/cron.d 디렉토리에가서 ls -l 로 검색해주면
cronjob_bandit23이 있는 것을 확인할 수 있었다. 읽을 권한이 있으니 읽는다.
cat ./cronjob_bandit23
읽은 결과->
@reboot bandit23 /usr/bin/cronjob_bandit23.sh  &> /dev/null
* * * * * bandit23 /usr/bin/cronjob_bandit23.sh  &> /dev/null
bandit22와 다를게 없어보인다.

그렇다면 해당 디렉토리로 넘어가서 읽어보자 (여기선 절대경로로 읽은 것으로 간주)
cat /usr/bin/cronjob_bandit23.sh
읽은 결과 ->
#!/bin/bash

myname=$(whoami)
mytarget=$(echo I am user $myname | md5sum | cut -d ' ' -f 1)

echo "Copying passwordfile /etc/bandit_pass/$myname to /tmp/$mytarget"

cat /etc/bandit_pass/$myname > /tmp/$mytarget

설명서다.
myname = whoami로 간단하게 자신이 누구인지 적으면 되는거고.
mytarget = echo I am user $myname | md5sum | cut -d ' ' -f 1로 자신의 값을 넣어주면 된다고 한다.
일단 나는 md5sum과 cut 명령어를 모르기에 검색해봤다.
md5sum = 지정된 파일을 md5라는 해시 알고리즘으로 값을 체크섬 값을 계산하는 명령어란다. 입력된 파일을 30자 정도의 문자로 축약한 값을 알려준다고 한다.
cut = 파일 내용을 각 필드로 구분하고 필드별로 내용을 추출하며, 필드들을 구분자로 구분할 수 있는 명령어! option -d 는 필드를 구분하는 문자를 지정하는 것이라고 -f는 잘라낼 필드를 말한다.

그러니까 저 echo 명령어로 출력한 " i am user $myname" 을 md5sum으로 변경하고 cut으로 다듬는다고 간단하게 생각하기로 했다.

자 그럼, 
whoami= bandit22
mytarget = 8169b67bd894ddbb4412f91573b38db3 (echo I am user bandit22 | md5sum | cut -d ' ' -f 1로 나온 값)
cat /etc/bandit_pass/bandit22 > /tmp/8169b67bd894ddbb4412f91573b38db3 하고
읽어봤더니, bandit22의 비밀번호가 나왔다.
엥?
아. bandit23을 얻어내려면 mytarget을 "echo I am user bandit23 | md5sum | cut -d ' ' -f 1" 으로 했어야했다.
다시,cat /etc/bandit_pass/bandit22 > /tmp/8ca319486bfbbc3663ea0fbe81326349 로 했더니 권한이 없다고한다.
그렇다면 안에 파일이 있을터.
cat으로 열어봤더니 답이 나왔다.
ls -l 로 해당파일을 열어보니
-rw-r--r-- 권한, user= bandit23, group=root인 8ca319486bfbbc3663ea0fbe81326349 ASCII text파일이 있었다.



답 ==jc1udXuA1tiHqjIsL8yaapX5XIAI6i0n












#Bandit Level 23 → Level 24
Level Goal)
-A program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what command is being executed.

-NOTE: This level requires you to create your own first shell-script. This is a very big step and you should be proud of yourself when you beat this level!

-NOTE 2: Keep in mind that your shell script is removed once executed, so you may want to keep a copy around…

Commands you may need to solve this level)
-cron, crontab, crontab(5) (use “man 5 crontab” to access this)

#Bandit Level 23 → Level 24 풀이 과정)
cd /etc/cron.d 에가 서 ls -al로 파일을 들여다 봤다.
cronjob_bandit24가 있으니 cat으로 내용 읽기.
cat ./cronjob_bandit24 ->
@reboot bandit24 /usr/bin/cronjob_bandit24.sh &> /dev/null
* * * * * bandit24 /usr/bin/cronjob_bandit24.sh &> /dev/null

이라는 출력이 나오는데 전 레벨과 진행은 비슷했다.
cd /usr/bin 으로 이동 cat으로 cronjob_bandit24.sh를 읽어보면
cat cronjob_bandit24.sh ->
myname=$(whoami)

cd /var/spool/$myname
echo "Executing and deleting all scripts in /var/spool/$myname:"
for i in * .*;
do
    if [ "$i" != "." -a "$i" != ".." ];
    then
        echo "Handling $i"
        owner="$(stat --format "%U" ./$i)"
        if [ "${owner}" = "bandit23" ]; then
            timeout -s 9 60 ./$i
        fi
        rm -f ./$i
    fi
done
이란 문서가 출력되는데 여기서부터 엄청난 시행착오가 발생했다.
전 레벨을 보면 저 에코를 써서 mytarget 코드를 구해주는 실행이 이루어졌었다.
echo는 그냥 출력문 c언어로치면 printf같은 존재라고 이해했기에 저건 그냥 나에게 안내해주는 정도?
착오는 저 밑에 코드들이 내가 작동시켜야 할 코드인 줄 알았던 것이다.
저기서 보면 /var/spool/$myname 이라는 곳에 가서 하라는 것이로 이해하고
/var/spool/bandit24 에 가서 ls -al을 했으나 권한 없음.
디렉토리 권한을 보니 drwxrwx-wx였다. user = root, group = bandit24.
즉 나는 쓰고 실행만 할 수 있기 때문에 여기서 만들어라! 라고 이해했고, 스크립트 파일을 만들기로 했다.
good 이라는 파일에 아까 출력한 코드들을 입력하고,
good.sh라는 스크립트 파일을 만들어 코드를 심었다.
결과는 역시 꽝...
음... 이걸 실행한다고 코드를 알려줄 것 같지 않았다. 그래서 뭐지? 어떻게 하지? 라며 스크립트 코드와 파일을 뜯기를 수십차례.
도저히 나의 수준에서는 어떻게 진행하란 것인지 알 수 없었다. 그래서 답에서 내가 막힌 부분만 해결하고 나머지를 진행해보기로 결정.
아, tmp 파일을 이용해서 rwx의 모든 권한을 주고, 스크립트 파일을 실행시켜서 거기다가 패스워드를 가져오게 만들면 되는 것이었다.
게다가... 해석하기를 잘못 해석했구나...
보고 아 이걸로 해킹도 할 수 있겠구나 싶었다.
tmp로 가서 24_pwd라는 디렉토리를 만들고, 권한을 보니 수정이 필요해보였다.
chmod 777 24_pwd 실행.
ls -ld 24_pwd 실행하니 권한이 잘들어간 것을 볼 수 있었다. 이제 이곳은 누구나 사용가능하다.
다시 /var/spool/bandit24 로가서 스크립트를 만들고, 그곳에 명령을 /etc/bandit_pass/bandit24 파일을 /tmp/24_pwd/pwd_file 로 만들라 하면 되는 것!
pwdcopy.sh를 만들고 내용을 입력한다
vi pwdcopy.sh ->
# 비밀번호 복사 /etc/bandit_pass/bandit24 -> /tmp/24_pwd/pwd_file         
2 * * * * * * bandit24 cat /etc/bandit_pass/bandit24 > /tmp/24_pwd/pwd_file    
저장.
60초마다 진행된다고 했으니 잠시 기다렸다가 /tmp/24_pwd 디렉토리로 이동해확인했다.
어...? 안나온다. 그래서 확인해봤더니. 권한이 문제였다. 내가 만든 파일의 권한을 다 풀어줘야했다 chmod 777 pwdcopy.sh를 빠르게 해줬다.(곧 삭제될테니)
파일을 제대로 생성했으나 비밀번호를 가져오지 않았다. 무슨 문제지? 하고 코드를 들여다보니... 그냥 명령어를 입력하면 실행되는 거였다. 
생각해보면 crontab으로 매분 /var/spool/bandit24의 스크립트파일을 모조리 실행하고 삭제하는데, 그 실행할 때 또 예약을 건다면 그게 실행될까? 아마, 실행은 되더라도 삭제하면서 그 명령도
삭제되어 실행되지 않나 추측한다. 
다시 vi를 사용하여 작성한다.
vi copypwd.sh ->
#pwd copy                                                                                                                                                                              
cat /etc/bandit_pass/bandit24 > /tmp/24_pwd/pwd_file  
이렇게 하니 비밀번호를 잘 찾아왔다.

정리해보자면, cron을 실행할 때, setuid가 이뤄지니 현재 나는 bandit23이지만 bandit24의 권한을 얻어올 수 있는 것이고 그 권한으로 bandit24의 파일을 복사할 수 있는 것이다.
그 과정에서 자잘한 권한 문제와 복잡한 반복이 있었지만(나중에 확인해보니 tmp파일에 스크립트를 만들고 cp로 /var/spool/bandit24로 복사하더라. 미친...)
cron에 대한 이해도가 상승한 것에 충분한 만족감이 느껴진다.
cron을 사용할 때, 보안에 신경써야겠구나 싶기도하고 이렇게 비밀번호도 빼올 수 있다니 신기했다.





답 == UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ